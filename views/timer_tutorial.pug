extends layout

block content

    .container

            .row
                .col.text-center.text-white.mt-3
                    .my-3.py-3
                        div.res.clock
            .row
                .col
                    h1.display-4.font-italic React Timer Tutorial
                    p.lead.my-3

            .row
                .col

                    .border.my-2

                    div.my-3.article

                        h4 Section 0: Intro

                        p In this tutorial, we will be going over how to create a digital timer in React.

                        p
                        i Why a digital timer,
                        |  you may ask? Because a digital timer demonstrates the most important strength of React: Updating UI
                        strong  quickly
                        |  and
                        strong  efficiently.

                        p
                        |React renders in a virtual DOM, called the
                        a.font-weight-bold(href="https://reactjs.org/docs/react-dom.html")  React DOM.
                        p  The React DOM compares changes in an element and its children to the previous version, allowing it to only change the DOM where it is necessary.
                        p This results in a faster, and more lightweight strategy for real time updates.

                        .border.my-3

                        h4 Section 1: Getting Started

                        p
                        | You can follow along with this tutorial through this codepen:
                        ul
                            li
                                a.font-weight-bold(href="https://codepen.io/maleriefleischman/pen/NWGpqNd" target="_blank")  Timer Tutorial

                        p
                        | In the codepen, you will see that we have an
                        i  HTML
                        |  file, and a
                        i  JavaScript
                        |  file.
                        p
                        | The HTML file includes an empty div with an
                        i   id="root".


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>&lt;html&gt;</span>
                                        <span class="indent-a">&lt;head&gt;&lt;/head&gt;</span>
                                        <span class="indent-a">&lt;body&gt;</span>
                                        <span class="highlight indent-b">&lt;div id="root"&gt;&lt;/div&gt;</span><span class="indent-a">&lt;/body&gt;</span>
                                        <span> &lt;/html&gt;</span>



                        p
                        | Our React App will render within this div.


                        p
                        | Speaking of rendering, let's look at that next!
                        p
                        | At the bottom of the JavaScript file, we call
                        strong  ReactDOM.render().
                        |   This function renders our React content.
                        p
                        |
                        strong   ReactDOM.render()
                        |   requires two parameters:
                        p
                            ol
                                li The  React content we want to render
                                li The HTML element the React content will render within


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>ReactDOM.render( </span>
                                        <span class="indent-a">&lt;Clock /&gt;, </span>
                                        <span class="indent-a">document.getElementById('root') </span>
                                        <span> ); </span>

                        p
                        | Those of you who are familiar with JavaScript probably find the above code weird, or wrong.
                        p
                        | That’s because a portion of this code is not JavaScript, but an extension of JavaScript called
                        strong  JSX.



                        .border.my-3

                        h4 Section 2: JSX & Elements

                        p
                        |
                        strong JSX
                        |  looks and functions similar to HTML, but has the added benefit of harnessing JavaScript variables and functions.

                        p
                        | It is used to create small plain objects referred to as
                        strong  elements.

                        p
                        | Consider the following code:


                        .code.rounded
                            div.m-2
                                pre
                                    code
                                        <span>class Clock extends React.Component{</span>
                                        <span class="indent-a">render(){</span>
                                        <span class="indent-b">return(</span>
                                        <span class="highlight indent-c">&lt;div&gt;</span><span class="highlight indent-d"></span><span class="highlight indent-d">&lt;button&gt; Start! &lt;/button&gt; </span><span class="highlight indent-d">&lt;button&gt; Stop! &lt;/button&gt; </span><span class="highlight indent-c">&lt;/div&gt;</span>
                                        <span class="indent-b">);</span>
                                        <span class="indent-a">}</span>
                                        <span>}</span>





                        p
                        |The highlighted portions are elements written in
                        strong   JSX.

                        p
                        |
                        strong JSX
                        |   is useful because it allows you to jump from using JavaScript to HTML in the same file.


                        p
                        | The JSX is enclosed in parenthesis to separate it from the surrounding JavaScript.
                        p
                        |The none highlighted portion is standard JavaScript where it is declaring a
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes")   JavaScript class
                        |  as a
                        strong  React Component.



                        .border.my-3

                        h4 Section 3: Components

                        p
                        |
                        strong  Components
                        |  are the building blocks of a React application.

                        p
                        |  They function more or less like
                        strong  JavaScript functions
                        |  and they help to split UI into
                        i  small, separate,
                        |  and
                        i  reusable
                        |  pieces.
                        p
                        |Components can be declared as a
                        strong  function
                        |  or an
                        strong  ES6 class.
                        |  Declaring a component as a class allows for some additional features such as utilizing
                        strong  state
                        |   (which we will touch on soon).

                        p
                        | Let's take another look at the code section we saw above:

                        .code.rounded
                            div.m-2
                                pre
                                    code
                                        <span class="highlight">class Clock extends React.Component{</span><span class="highlight indent-a">render(){</span><span class= "indent-b">return(</span>
                                        <span class="indent-c">&lt;div&gt;</span>
                                        <span class="indent-d">&lt;button&gt; Start! &lt;/button&gt; </span>
                                        <span class="indent-d">&lt;button&gt; Stop! &lt;/button&gt; </span>
                                        <span class="indent-c">&lt;/div&gt;</span>
                                        <span class="indent-b">);</span>
                                        <span class="indent-a">}</span>
                                        <span>}</span>



                        p
                        | This is an example of a simple component that renders pure HTML.
                        p
                        | The JavaScript class "Clock" is declared as a
                        strong   component
                        |   by extending
                        strong   React.Component.
                        p
                        | Next, we see the
                        strong  render()
                        |  method.
                        p
                        |Once called, the render() method examines
                        strong    this.props
                        |  and
                        strong  this.state
                        |  (more on these in a moment)
                        |  and returns
                        strong  React elements.




                        .border.my-3

                        h4 Section 4: Props & State

                        p
                        | Elements can be generalized or updated in two different ways. Either by being passed
                        strong  props
                        |  (short for properties),
                        | or by referencing their parent components
                        strong  state.

                        p
                        |State and props are both
                        strong  plain JavaScript objects
                        |   that
                        strong   render updates in the UI
                        |   when changed.
                        p
                        |  The main difference between the two is that
                        strong  props
                        |  function like parameters, they get
                        i   passed to
                        |   a component. Whereas
                        strong  state
                        |   is private, it is initialized
                        i   inside of
                        |   the component.

                        p
                        |  We'll mainly be using
                        strong  state
                        |   in this tutorial, but if you want to learn more about props and how it differs from state, check out the following articles:
                        ul
                            li
                                a.font-weight-bold(href="https://reactjs.org/docs/components-and-props.html") Components and Props
                            li
                                a.font-weight-bold(href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md") props vs state


                        p
                        |  The main thing to keep in mind is that
                        strong  props
                        |   and
                        strong  state
                        |  are how React elements are
                        strong  changed.


                        h4.my-3 Section 4.1: Initializing State

                        p
                        | As stated above,
                        strong  state
                        |  is initialized inside of the component.
                        p
                        | Let's try that out now by declaring our timers
                        strong  state.
                        p
                        | Declaring
                        strong   state
                        |  requires three steps:

                        ol

                            li
                                p
                                | First, we add a
                                a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor")  class constructor

                            li
                                p
                                | Next, we pass
                                strong  props
                                |  to the base constructor by calling
                                strong  super(props).

                            li
                                p
                                | Finally, we define our state within
                                strong  this.state
                                |  and give it the property
                                strong  date.


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>class Clock extends React.Component{</span>
                                        <span class="indent-a">// step 1 </span>
                                        <span class="highlight indent-a">constructor(props){ </span><span class="indent-b">// step 2 </span>
                                        <span class="highlight indent-b">super(props) </span><span class="indent-b">// step 3 </span>
                                        <span class="highlight indent-b">this.state = {date: new Date()}; </span><span class="indent-a">} </span>
                                        <span> ... </span>



                        .border.my-3

                        h4 Section 5: Referencing State

                        p
                        | Now that we have an initialized
                        strong  state,
                        |  let’s try using it in our render function.

                        p
                            strong Curly braces
                            |  in JSX indicate that we are jumping back to JavaScript
                            p
                            | In this case, we'll use the curly braces to reference the state property
                            strong  date.


                        .code.rounded
                            div.m-2
                                pre
                                    code
                                        <span>...</span>
                                        <span class="indent-a">render(){</span>
                                        <span class="indent-b">return(</span>
                                        <span class="indent-c">&lt;div&gt;&lt;</span>
                                        <span class="indent-d">&lt;button&gt; Start! &lt;/button&gt; </span>
                                        <span class="indent-d">&lt;button&gt; Stop! &lt;/button&gt; </span>
                                        <span class="highlight indent-d">&lt;p&gt; {this.state.date.toLocaleTimeString()} &lt;/p&gt; </span><span class="indent-c">&lt;/div&gt;</span>
                                        <span class="indent-b">);</span>
                                        <span class="indent-a">}</span>




                        .border.m-2


                        h4 Section 6: Changing State


                        p
                        |
                        strong State
                        |  can be updated through
                        strong  child components
                        |  declared inside the
                        strong  parent component.

                        p
                        |  We’ll write a function called
                        strong  tick()
                        |  that will update the
                        strong  date
                        |  property of state:

                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>tick(){</span>
                                        <span class="indent-a">this.setState({ </span>
                                        <span class="indent-b">date: new Date() </span>
                                        <span class="indent-a">});</span>
                                        <span>}</span>



                        .alert.alert-warning
                            strong Note:
                            i  this.setState
                            |  is used when
                            strong  updating
                            |  a state whereas
                            i  this.state
                            |  is used when
                            strong  initializing
                            |  a state.
                            | Be sure not to get them confused!

                        p
                        | Now, every time
                        strong  tick()
                        |  is called, React updates the
                        strong  date
                        |  property of state, and the UI is re-rendered with the new state.

                        p
                        | This is the first step towards making our timer
                        strong  run.

                        p
                        | Like most standard timers, we'll want our timer to run when the user clicks on the
                        strong  Start!
                        |  button.

                        p
                        |
                        i But how do we know when a button is clicked? And how do we trigger the function to run when it happens?

                        p
                        | We can address both of these concerns by
                        |   passing the event handler
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick")  onClick
                        |  to the tick() component.


                        .border.my-3

                        h4 Section 7: Passing Event Handlers to Components

                        p
                        |
                        strong  onClick
                        |  is an event handler that processes a
                        strong  click
                        |  event on a specific element.

                        p
                        | Let's use the
                        strong   onClick
                        |  event handler to call
                        |  our new function when the
                        strong  "Start!"
                        |  button is clicked.



                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>render(){ </span>
                                        <span class="indent-a">return( </span>
                                        <span class="indent-b">&lt;div&gt; </span>
                                        <span class="highlight indent-c">&lt;button onClick = {() => {this.tick()}}&gt; Start! &lt;/button&gt; </span><span class="indent-c">&lt;button&gt; Stop! &lt;/button&gt; </span>
                                        <span class="indent-b">&lt;/div&gt;</span>
                                        <span class="indent-a">) </span>
                                        <span>} </span>



                        p
                        | Here, we use our curly braces to indicate that we are switching from HTML to JavaScript.

                        p
                        |  We then use an
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions")  arrow function
                        |  to call and
                        strong  bind
                        |  the event handler to tick().

                        p
                        |
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind")  Binding
                        |  is required to give the function access to component attributes like
                        strong  this.props
                        |  and
                        strong  this.state.


                        .alert.alert-warning.my-3
                            strong Note:
                            |  React offers several different ways to bind a function to a component instance. Check out Reacts
                            a.font-weight-bold(href="https://reactjs.org/docs/faq-functions.html")  Handling Events
                            |  article for information on the pros and cons of the different methods.


                        p
                        | At this point, we have a UI that updates every time the
                        strong  Start!
                        |  button is clicked.

                        p
                            i  But wait,
                            |  you may be wondering,
                            i  this is a timer, shouldn't it be updating every second until we tell it to stop?
                            p  Well, you’re absolutely right. Let’s fix that now.


                        .border.m-2

                        h4 Section 8: Updating UI Each Second

                        p
                        | In order to create a ticking clock, we'll need a state property that can keep track of whether the timer should be running.

                        p
                        |Let’s add another state property called
                        strong  isRunning.



                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>class Clock extends React.Component{ </span>
                                        <span class="indent-a">constructor(props){ </span>
                                        <span class="indent-b">super(props); </span>
                                        <span class="indent-b">This.state = { </span>
                                        <span class="indent-c">date: new Date(), </span>
                                        <span class="highlight indent-c">isRunning: false </span><span class="indent-b">};</span>
                                        <span class="indent-a">} </span>
                                        <span class="indent-a">render(){</span>
                                        <span class="indent-b">...</span>


                        p
                        |Now we can create a component
                        |  that can call
                        strong  tick()
                        |  every 1000 milliseconds (or 1 second) using
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval")  setInterval.


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>start() {</span>
                                        <span class="indent-a">this.setState({ </span>
                                        <span class="indent-b">isRunning: true </span>
                                        <span class="indent-a">}) </span>
                                        <span class="indent-a">this.timerID = setInterval( </span>
                                        <span class="indent-b">() => this.tick(), </span>
                                        <span class="indent-b">1000 </span>
                                        <span class="indent-a">); </span>
                                        <span>} </span>


                        p
                        |Let's go ahead and call
                        strong  this.start()
                        |  when the Start! button is clicked

                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span> &lt;button onClick={()=>{this.start()}}&gt Start! &lt;/button&gt; </span>


                        p
                        | A timer isn’t very useful if you can't make it stop.
                        p
                        |We'll use the same idea we used above to create another component called
                        strong  stop().


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>stop() {</span>
                                        <span class="indent-a">clearInterval(this.timerId); </span>
                                        <span class="indent-b"> this.setState({ </span>
                                        <span class="indent-c">isRunning: false </span>
                                        <span class="indent-b">}) </span>
                                        <span>}</span>

                        p
                        |The
                        strong  stop()
                        |  function updates state and changes
                        strong   isRunning
                        |   to false. It then stops running
                        strong   tick()
                        |   by utilizing
                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval")   clearInterval().

                        p
                        | Now we can call
                        strong   stop()
                        |   when the “Stop!” button is clicked.


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>&lt;button onClick={()=>{this.stop()}}&gt Stop! &lt;/button&gt; </span>


                        .border.m-2

                        h4 Section 9: Formatting Time

                        p
                        |At this point, we’ve got a functioning digital clock that we can stop and start; but we want a
                        strong  timer.

                        p
                        |Our timer should display the amount of time that has
                        strong  elapsed
                        |  while it is running.

                        p
                        |In order to calculate the amount of time that has elapsed we’ll need to know the following state
                        strong  properties:

                        p

                            ol
                                li    The time the timer was started
                                li    The time it is now
                                li   Whether or not the timer is running

                        p
                        |We already have state properties to store the current time and whether the timer should be running.
                        p
                        |Let's add one more to store the time the clock was started:

                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>class Clock extends React.Component{ </span>
                                        <span class="indent-a">constructor(props){ </span>
                                        <span class="indent-b">super(props); </span>
                                        <span class="indent-b">This.state = { </span>
                                        <span class="indent-c">date: new Date(), </span>
                                        <span class="indent-c">isRunning: false, </span>
                                        <span class= "highlight indent-c">start: new Date() </span><span class="indent-b">};</span>
                                        <span class="indent-b">}
                                        <span class="indent-a">render(){ </span>
                                        <span>...</span>



                        p
                        |We’ll want to make sure the
                        strong   start
                        |   property of state gets updated whenever the timer starts.
                        p
                        | Let’s add it in our
                        strong   start()
                        |   function:


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>start() {</span>
                                        <span class="indent-a">this.setState({ </span>
                                        <span class = "highlight indent-b">start: new Date(), </span><span class="indent-b">isRunning: true </span>
                                        <span class="indent-a">}) </span>
                                        <span class="indent-a">this.timerID = setInterval( </span>
                                        <span class="indent-b">() => this.tick(), </span>
                                        <span class="indent-b">1000 </span>
                                        <span class="indent-a">); </span>
                                        <span>} </span>


                        p
                        | Next, we’ll want to make a function outside of our Clock class that displays the elapsed time in a recognizable format.

                        p
                            | The amount of time that has elapsed is equal to the
                            strong   start time
                            |   subtracted from the
                            strong   current time.


                            p
                            | In order to display the
                            strong   elapsed time
                            |   in the traditional
                            strong   hh:mm:ss format,
                            |   we need to isolate the Hours, Minutes, and Seconds that have elapsed.
                            |   We can easily find them by using the following JavaScript functions :

                            p

                                ul
                                    li
                                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours") getUTCHours()
                                    li
                                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes") getUTCMinutes()
                                    li
                                        a.font-weight-bold(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds") getUTCSeconds()



                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>function UTCTime(start,end) {</span>
                                        <span class="indent-a">let time = new Date(Math.abs(start-end)); </span>
                                        <span class="indent-a">let hours = time.getUTCHours();</span>
                                        <span class="indent-a">let minutes = time.getUTCMinutes();</span>
                                        <span class="indent-a">let seconds = time.getUTCSeconds(;)</span>
                                        <span class="indent-a">return( </span>
                                        <span class="indent-b">... </span>
                                        <span class="indent-a">); </span>
                                        <span>} </span>





                        p
                        | These functions don’t provide leading zeros, which doesn’t fit with our
                        strong   hh:mm:ss
                        |  format.


                        p
                        | In the return function, we’ll do a check to see if the hours, minutes, and seconds are double digits or not and add a leading zero if needed.


                        .code.rounded
                            .m-2
                                pre
                                    code
                                        <span>...</span>
                                        <span class="indent-a">return( </span>
                                        <span class="indent-b">(hours<10 ? '0' : '') + String(hours) + ':' + </span>
                                        <span class="indent-b">(minutes<10 ? '0' : '') + String(minutes) + ':' + </span>
                                        <span class="indent-b">(seconds<10 ? '0' : '') + String(seconds) </span>
                                        <span class="indent-a">); </span>



                        p
                            | Finally, we replace
                            strong    this.state.date.toLocaleTimeString()
                            |  with our new
                            strong  UTCTime()
                            |   function.
                            p
                            | We then call
                            strong  this.state.date
                            |   and
                            strong   this.state.start
                            |   as the parameters.


                        .code.rounded
                            div.m-2
                                pre
                                    code
                                        <span>...</span>
                                        <span class="indent-a">render(){</span>
                                        <span class="indent-b">return(</span>
                                        <span class="indent-c">&lt;div&gt;</span>
                                        <span class="indent-d">&lt;button&gt; Start! &lt;/button&gt; </span>
                                        <span class="indent-d">&lt;button&gt; Stop! &lt;/button&gt; </span>
                                        <span class="highlight indent-d">&lt;p&gt; {UTCTime(this.state.start,this.state.date)} &lt;/p&gt; </span><span class="indent-c">&lt;/div&gt;</span>
                                        <span class="indent-b">);</span>
                                        <span class="indent-a">}</span>




                        .border.m-2

                        p
                        | We now have a functional timer!


                        .footer

                            .row
                                .col

                                    p I hope you found this tutorial to be informational.
                                    p For more resources on React check out the following links:

                                    ul
                                        li
                                            a(href="https://reactjs.org" target="_blank") https://reactjs.org

                                        li
                                            a(href="https://reactjs.org/tutorial/tutorial.html" target="_blank") https://reactjs.org/tutorial/tutorial.html

                                        li
                                            a(href="https://reactjs.org/blog/2020/02/26/react-v16.13.0.html" target="_blank") https://reactjs.org/blog/2020/02/26/react-v16.13.0.html

                                        li
                                            a(href="https://reactjs.org/community/support.html" target="_blank") https://reactjs.org/community/support.html


